# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WSSabAhkZXW67A33xvTvrTjgDgtVPkyQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics import silhouette_score
import itertools

# Google drive link for the dataset CSV file
!gdown --id 1CiVjAMtFZoOAVzQS6tOi1I6Fr3AkVzqR

# Load your preprocessed DataFrame
df = pd.read_csv('/content/Updated_CSV.csv')

# List of selected categories
categories = ['accessories', 'bags', 'kids', 'beauty', 'jewelry', 'women', 'men', 'house', 'shoes']

# Dictionary to store Silhouette Scores by category
silhouette_scores_by_category = {}

# Function to perform clustering with DBSCAN and limit clusters to around 120
def dbscan_analysis(df, category, target_clusters=120):
    print(f"Processing category: {category}")

    # Filter data for the current category
    category_data = df[df['category'] == category]

    # Select features for clustering
    X = category_data[['current_price', 'discount', 'likes_count']]

    # Range of parameters for DBSCAN
    epsilons = np.linspace(0.01, 1, num=15)
    min_samples_range = np.arange(2, 15, step=3)

    best_score = -1
    best_params = None
    best_labels = None

    # Find DBSCAN parameters aiming for around 120 clusters
    for eps, min_samples in itertools.product(epsilons, min_samples_range):
        dbscan_model = DBSCAN(eps=eps, min_samples=min_samples)
        labels = dbscan_model.fit_predict(X)

        # Ignore models with too few or too many clusters
        num_clusters = len(set(labels)) - (1 if -1 in labels else 0)
        if num_clusters < 100 or num_clusters > 140:
            continue

        score = silhouette_score(X, labels)
        if score > best_score:
            best_score = score
            best_params = (eps, min_samples)
            best_labels = labels

    print(f'Best Epsilon Value: {best_params[0]}')
    print(f'Best Min Samples Value: {best_params[1]}')
    print(f'Best Silhouette Score: {best_score}')

    # Store the best Silhouette Score for the current category
    silhouette_scores_by_category[category] = best_score

    # Apply DBSCAN with best parameters
    dbscan_model = DBSCAN(eps=best_params[0], min_samples=best_params[1])
    category_data['cluster'] = dbscan_model.fit_predict(X)

    # Generate Data Proximity Plot
    neighbors = NearestNeighbors(n_neighbors=best_params[1])
    neighbors_fit = neighbors.fit(X)
    distances, indices = neighbors_fit.kneighbors(X)
    distances = np.sort(distances[:, 1])  # Sort by the second neighbor distances

    # Plot Data Proximity
    plt.figure(figsize=(8, 5))
    plt.plot(distances)
    plt.title(f'Data Proximity Plot for {category}')
    plt.xlabel('Points')
    plt.ylabel('Distance')
    plt.show()

    return category_data

# Function to plot top 10 products from 20 clusters using discount and likes_count
def plot_top_10_products(category_data):
    # Select 20 clusters randomly
    clusters = category_data['cluster'].unique()
    selected_clusters = np.random.choice(clusters, size=20, replace=False)

    # Get top 10 products from each selected cluster
    top_products_per_cluster = []
    for cluster_id in selected_clusters:
        cluster_data = category_data[category_data['cluster'] == cluster_id]
        top_cluster_products = cluster_data.nlargest(10, 'likes_count')
        top_products_per_cluster.append(top_cluster_products)

    top_products_df = pd.concat(top_products_per_cluster)

    # Plot all top 10 products from each of the 20 clusters
    plt.figure(figsize=(10, 6))
    for cluster_id in selected_clusters:
        cluster_data = top_products_df[top_products_df['cluster'] == cluster_id]
        plt.scatter(cluster_data['discount'], cluster_data['likes_count'], label=f'Cluster {cluster_id}')
    plt.xlabel('Discount')
    plt.ylabel('Likes Count')
    plt.title('Top 10 Products from 20 Clusters (Discount vs Likes Count)')
    plt.legend()
    plt.show()

    return top_products_df

# Function to plot top products overall from selected clusters using discount and likes_count
def plot_top_products_overall(category_data, top_products_df):
    # Plot top products overall from the selected clusters
    top_products_overall = top_products_df.nlargest(10, 'likes_count')

    plt.figure(figsize=(10, 6))
    plt.scatter(top_products_overall['discount'], top_products_overall['likes_count'], color='black', marker='*', s=100)
    plt.xlabel('Discount')
    plt.ylabel('Likes Count')
    plt.title('Top Products Overall from Selected Clusters (Discount vs Likes Count)')
    plt.show()

    print("Top Products Overall from Selected Clusters:")
    print(top_products_overall[['subcategory', 'discount', 'likes_count']])

    return top_products_overall

# Function to plot top 10 products overall across all categories
def plot_top_10_products_overall_all_categories(all_category_top_products):
    # Concatenate the top products from all categories
    all_top_products_df = pd.concat(all_category_top_products)

    # Get the top 10 products overall
    top_10_overall = all_top_products_df.nlargest(10, 'likes_count')

    # Plot the top 10 products overall
    plt.figure(figsize=(10, 6))
    plt.scatter(top_10_overall['discount'], top_10_overall['likes_count'], color='red', marker='o', s=100)
    plt.xlabel('Discount')
    plt.ylabel('Likes Count')
    plt.title('Top 10 Products Overall Across All Categories (Discount vs Likes Count)')
    plt.show()

    print("Top 10 Products Overall Across All Categories:")
    print(top_10_overall[['category', 'subcategory', 'discount', 'likes_count']])

# Process each category and store top products
all_category_top_products = []
for category in categories:
    category_data = dbscan_analysis(df, category)
    top_products_df = plot_top_10_products(category_data)
    top_products_overall = plot_top_products_overall(category_data, top_products_df)
    all_category_top_products.append(top_products_overall)
    print("-" * 50)

# Plot top 10 products overall across all categories
plot_top_10_products_overall_all_categories(all_category_top_products)

# Additional Plot for Silhouette Scores by Category
silhouette_scores_df = pd.DataFrame(list(silhouette_scores_by_category.items()), columns=['Category', 'Silhouette Score'])

# Plot a bar chart for the Silhouette Scores by category
plt.figure(figsize=(7, 6))
plt.bar(silhouette_scores_df['Category'], silhouette_scores_df['Silhouette Score'], color='skyblue')

# Set the labels and title
plt.ylabel('Silhouette Score')
plt.xlabel('Category')
plt.title('Silhouette Scores by Category (DBSCAN Clustering Algorithm)')

# Rotate category names for better readability
plt.xticks(rotation=45, ha='right')

# Display the plot
plt.tight_layout()
plt.show()